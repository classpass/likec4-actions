name: release-init

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version to release. Ex: v1.0.0'
        required: true
        default: 'v1.0.0'        
      likec4:
        description: 'likec4 version to bundle. Ex: 1.0.0'
        required: false
        default: 'latest'
      playwright:
        description: 'playwright version. Ex: v1.42.1'
        required: false
        default: ''        

jobs:
  release-init:
    if: "github.ref == 'refs/heads/main'"
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: wow-actions/use-app-token@v2
        id: likec4-bot
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ env.BOT_TOKEN }}

      - name: check for tag
        run: |
          TAG="${{ github.event.inputs.version }}"
          if [ "$(git tag -l "${TAG}")"  ]; then
            echo "::error::Tag ${TAG} exists"
            exit 1
          fi          

      - name: update Dockerfile
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "ARG LIKEC4_VER.*"
          replace: "ARG LIKEC4_VER=${{ github.event.inputs.likec4 || 'latest' }}"          
          include: "Dockerfile"
          
      - name: update Playwright
        if: ${{ github.event.inputs.playwright != '' }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "playwright\\:.*-jammy"
          replace: "playwright:${{ github.event.inputs.playwright }}-jammy"          
          include: "Dockerfile"        

      - name: review Dockerfile
        run: cat Dockerfile

      - name: update action.yml
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ".*image\\:.*"
          replace: '  image: docker://ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}'
          include: "action.yml"     

      - name: review action.yml
        run: cat action.yml 

      - name: create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: "release: ${{ github.event.inputs.version }}"
          title: "release: ${{ github.event.inputs.version }}"
          body: |
            likec4 version: ${{ github.event.inputs.likec4 || 'latest' }}
          branch: release/${{ github.event.inputs.version }}
          base: main
          delete-branch: true        

      # - id: commit-message
      #   shell: bash
      #   run: |
      #     {
      #       echo 'value<<EOF'
      #       echo 'release: ${{ github.event.inputs.version }}'
      #       echo 'likec4 version: ${{ github.event.inputs.likec4 }}'
      #       echo EOF
      #     } >> "$GITHUB_OUTPUT"

      # - name: commit changes
      #   id: auto-commit-action
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   with:
      #     # Optional. Commit message for the created commit.
      #     # Defaults to "Apply automatic changes"
      #     commit_message: ${{ steps.commit-message.outputs.value }}
      #     # Optional. Local and remote branch name where commit is going to be pushed
      #     #  to. Defaults to the current branch.
      #     #  You might need to set `create_branch: true` if the branch does not exist.          
      #     tagging_message: ${{ github.event.inputs.version }}
      #     # Optional commit user and author settings
      #     commit_user_name: ${{ env.BOT_NAME }}
      #     commit_user_email: ${{ env.BOT_NAME }}@users.noreply.github.com
      #     commit_author: ${{ env.BOT_NAME }} <${{ env.BOT_NAME }}@users.noreply.github.com>

      # - name: repository dispatch - Release
      #   if: steps.auto-commit-action.outputs.changes_detected == 'true'
      #   uses: peter-evans/repository-dispatch@v2
      #   with:
      #     event-type: release
      #     client-payload: '{"ref": "refs/heads/release/${{ github.event.inputs.version }}", "version": "${{ github.event.inputs.version }}"}'
