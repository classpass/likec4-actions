name: prepare-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version to release. Ex: v1.0.0'
        required: true
        default: 'v1.0.0'
      likec4:
        description: 'likec4 version to bundle. Ex: 1.0.0'
        required: false
        default: 'latest'

jobs:
  prepare-release:
    if: "github.ref == 'refs/heads/main'"
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions: 
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: tibdex/github-app-token@v1
        id: likec4-bot
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.likec4-bot.outputs.token }}

      - name: update Dockerfile
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "ARG LIKEC4_VER.*"
          replace: "ARG LIKEC4_VER=${{ github.event.inputs.likec4 || 'latest' }}"          
          include: "Dockerfile"        

      - name: review Dockerfile
        run: cat Dockerfile

      - name: update action.yml
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ".*image\\:.*"
          replace: '  image: docker://ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}'
          include: "action.yml"     

      - name: review action.yml
        run: cat action.yml 

      - name: build docker
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: ${{ github.repository }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          snapshot: true
          no_push: true

      # - name: commit changes
      #   id: auto-commit-action
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   with:
      #     # Optional. Commit message for the created commit.
      #     # Defaults to "Apply automatic changes"
      #     commit_message: "release: ${{ github.event.inputs.version }}"
      #     # Optional. Local and remote branch name where commit is going to be pushed
      #     #  to. Defaults to the current branch.
      #     #  You might need to set `create_branch: true` if the branch does not exist.          
      #     tagging_message: ${{ github.event.inputs.version }}
      #     branch: release/${{ github.event.inputs.version }}
      #     create_branch: true
      #     push_options: '--force'
      #     skip_dirty_check: true

      # - name: repository dispatch - Release
      #   if: steps.auto-commit-action.outputs.changes_detected == 'true'
      #   uses: peter-evans/repository-dispatch@v2
      #   with:
      #     event-type: release
      #     client-payload: '{"ref": "refs/heads/release/${{ github.event.inputs.version }}", "version": "${{ github.event.inputs.version }}"}'

      - name: create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.likec4-bot.outputs.token }}
          commit-message: "release: ${{ github.event.inputs.version }}"
          title: "release: ${{ github.event.inputs.version }}"
          body: Update likec4 version to ${{ github.event.inputs.likec4 || 'latest' }}
          branch: release/${{ github.event.inputs.version }}
          base: main           


            
      # - name: Start ${{ matrix.images.environment }} Deployment
      #   uses: bobheadxi/deployments@v1.4.0
      #   id: deployment
      #   with:
      #     step: start
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     env: ${{ matrix.images.environment }}

      # # We don't rebuild the image to avoid that the latest tag and the release tags don't point to what the release tag is pointing to.
      # # Instead, we pull the latest image and tag it.
      # - name: Retag and Push Images
      #   uses: akhilerm/tag-push-action@v2.1.0
      #   with:
      #     src: ghcr.io/likec4/actions-export:latest
      #     dst: |
      #       ghcr.io/github/super-linter:${{ matrix.images.prefix }}v5
      #       ghcr.io/github/super-linter:${{ matrix.images.prefix }}${{ env.RELEASE_VERSION }}

      # We use ^{} to recursively deference the tag to get the commit the tag is pointing at.
      # Then, we use that reference to create new tags, so that the new tags point to the commit
      # the original tag was pointing to, and not to the original tag.
      # This notation is documented at https://git-scm.com/docs/gitrevisions#Documentation/gitrevisions.txt-emltrevgtemegemv0998em      